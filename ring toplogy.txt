# Ring Topology TCP Simulation in NS2 
 
# Create a simulator object 
set ns [new Simulator] 
 
# Open trace files 
set tracefile [open ring.tr w] 
$ns trace-all $tracefile 
set namfile [open ring.nam w] 
$ns namtrace-all $namfile 
 
# Create nodes 
set n0 [$ns node] 
set n1 [$ns node] 
set n2 [$ns node] 
set n3 [$ns node] 
set n4 [$ns node] 
 
# Create a 5 Mbps, 10 ms delay links to form a ring 
$ns duplex-link $n0 $n1 5Mb 10ms DropTail 
$ns duplex-link $n1 $n2 5Mb 10ms DropTail 
$ns duplex-link $n2 $n3 5Mb 10ms DropTail 
$ns duplex-link $n3 $n4 5Mb 10ms DropTail 
$ns duplex-link $n4 $n0 5Mb 10ms DropTail 
 
# Enable queue monitoring (optional) 
$ns queue-limit $n0 $n1 50 
$ns queue-limit $n1 $n2 50 
$ns queue-limit $n2 $n3 50 
$ns queue-limit $n3 $n4 50 
$ns queue-limit $n4 $n0 50 
 
# Create TCP agent and attach it to node 0 
set tcp [new Agent/TCP] 
$ns attach-agent $n0 $tcp 
 
# Create a TCP sink at node 3 
set sink [new Agent/TCPSink] 
$ns attach-agent $n3 $sink 
 
# Connect TCP agent to sink 
$ns connect $tcp $sink 
 
# Create a CBR traffic source over TCP 
set cbr [new Application/Traffic/CBR] 
$cbr set packetSize_ 1000 
$cbr set interval_ 0.001      ;# 1000 packets/sec 
$cbr attach-agent $tcp 
 
# Schedule events 
$ns at 0.01 "$cbr start" 
$ns at 5.0 "$cbr stop" 
$ns at 5.1 "finish" 
 
# Finish procedure 
proc finish {} { 
    global ns tracefile namfile 
    $ns flush-trace 
    close $tracefile 
    close $namfile 
    exec nam ring.nam & 
    exit 0 
} 
# Run the simulation 
$ns run 